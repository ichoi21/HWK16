{"version":3,"sources":["components/Header/Header.js","components/Table/Table.js","components/Main/Main.js","components/Footer/Footer.js","pages/Index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Table","props","data","columns","label","field","width","sort","rows","employeeInfo","sortable","striped","hover","Main","state","componentDidMount","axios","get","URL","then","staffDB","console","log","employee","results","i","length","record","profile","src","picture","thumbnail","alt","name","first","last","age","dob","email","phone","push","setState","this","React","Component","Footer","href","target","Index","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8OAaeA,G,YAXA,WACb,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,gEACb,wBAAIA,UAAU,aAAd,sBACA,uBAAGA,UAAU,QAAb,sC,wCCkCOC,EAtCD,SAACC,GACb,IA8BMC,EAAO,CACXC,QA/Bc,CACd,CACEC,MAAO,UACPC,MAAO,UACPC,MAAO,KAET,CACEF,MAAO,OACPC,MAAO,OACPC,MAAO,KAET,CACEF,MAAO,MACPC,MAAO,MACPC,MAAO,KAET,CACEF,MAAO,QACPC,MAAO,QACPC,MAAO,KAGT,CACEF,MAAO,eACPC,MAAO,QACPE,KAAM,MACND,MAAO,MAMTE,KAHSP,EAAMQ,cAKjB,OAAO,kBAAC,IAAD,CAAgBC,UAAQ,EAACC,SAAO,EAACC,OAAK,EAACV,KAAMA,K,iBCMvCW,E,4MArCbC,MAAQ,CACNL,aAAc,I,EAEhBM,kBAAoB,WAIlBC,IAAMC,IAAIC,gDAAsBC,MAAK,SAACC,GACpCC,QAAQC,IAAIF,GAGZ,IAFA,IAAMG,EAAWH,EAAQlB,KAAKsB,QAC1Bf,EAAe,GACVgB,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IAAK,CACxC,IAAIE,EAAS,CACXC,QACE,yBAAKC,IAAKN,EAASE,GAAGK,QAAQC,UAAWC,IAAKT,EAASE,GAAGQ,OAE5DA,KAAMV,EAASE,GAAGQ,KAAKC,MAAQ,IAAMX,EAASE,GAAGQ,KAAKE,KACtDC,IAAKb,EAASE,GAAGY,IAAID,IACrBE,MAAOf,EAASE,GAAGa,MACnBC,MAAOhB,EAASE,GAAGc,OAErB9B,EAAa+B,KAAKb,GAEpB,EAAKc,SAAS,CACZhC,aAAcA,Q,uDAKlB,OACE,6BACE,kBAAC,EAAD,CAAOA,aAAciC,KAAK5B,MAAML,oB,GAhCrBkC,IAAMC,WCeVC,MAnBf,WACE,OACE,yBAAK9C,UAAU,UACb,4BAAQA,UAAU,6BAChB,yBAAKA,UAAU,aACb,0BAAMA,UAAU,cACd,qDACwB,IACtB,uBAAG+C,KAAK,kCAAkCC,OAAO,SAAjD,sBCMCC,EAVD,WACZ,OACE,yBAAKjD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCSkD,MARf,WACE,OACE,yBAAKlD,UAAU,aACb,kBAAC,EAAD,QCKcmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.dccc0037.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div className=\"Header\">\n      <div className=\"jumbotron text-center bg-dark text-light pb-2 pt-2 z-depth-4\">\n        <h1 className=\"display-3\">Employee Directory</h1>\n        <p className=\"lead\">Let's find out who works here!</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { MDBDataTableV5 } from \"mdbreact\";\n\nconst Table = (props) => {\n  const columns = [\n    {\n      label: \"Profile\",\n      field: \"profile\",\n      width: 100,\n    },\n    {\n      label: \"Name\",\n      field: \"name\",\n      width: 200,\n    },\n    {\n      label: \"Age\",\n      field: \"age\",\n      width: 100,\n    },\n    {\n      label: \"Email\",\n      field: \"email\",\n      width: 100,\n    },\n\n    {\n      label: \"Phone Number\",\n      field: \"phone\",\n      sort: \"asc\",\n      width: 100,\n    },\n  ];\n  let rows = props.employeeInfo;\n  const data = {\n    columns: columns,\n    rows: rows,\n  };\n  return <MDBDataTableV5 sortable striped hover data={data} />;\n};\n\nexport default Table;\n","import React from \"react\";\nimport Table from \"../Table/Table\";\nimport axios from \"axios\";\n\n// import Search from \"../../utils/randomUsers\";\n\nclass Main extends React.Component {\n  state = {\n    employeeInfo: [],\n  };\n  componentDidMount = () => {\n    const URL = \"https://randomuser.me/api/?results=\";\n    const count = 30;\n    const nation = \"&nat=us\";\n    axios.get(URL + count + nation).then((staffDB) => {\n      console.log(staffDB);\n      const employee = staffDB.data.results;\n      let employeeInfo = [];\n      for (let i = 0; i < employee.length; i++) {\n        let record = {\n          profile: (\n            <img src={employee[i].picture.thumbnail} alt={employee[i].name} />\n          ),\n          name: employee[i].name.first + \" \" + employee[i].name.last,\n          age: employee[i].dob.age,\n          email: employee[i].email,\n          phone: employee[i].phone,\n        };\n        employeeInfo.push(record);\n      }\n      this.setState({\n        employeeInfo: employeeInfo,\n      });\n    });\n  };\n  render() {\n    return (\n      <div>\n        <Table employeeInfo={this.state.employeeInfo}></Table>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <div className=\"Footer\">\n      <footer className=\"sticky-footer text-center\">\n        <div className=\"container\">\n          <span className=\"text-muted\">\n            <small>\n              Copyright &copy; 2020{\" \"}\n              <a href=\"http://github.com/ichoi21/HWK16\" target=\"blank\">\n                i21 - HWK 16\n              </a>\n            </small>\n          </span>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\n\nimport Header from \"../components/Header/Header\";\nimport Main from \"../components/Main/Main\";\nimport Footer from \"../components/Footer/Footer\";\n\nconst Index = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n};\n\nexport default Index;\n","import React from \"react\";\nimport \"./App.css\";\nimport Index from \"./pages/Index\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Index />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}